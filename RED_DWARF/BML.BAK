//KRIS BICKHAM
//GR#3
//DUE MON
//PERIOD 6
//MR. BAKER
//											PRESS ESC TO GENERATE ENEMIS
//LIBRARIES------------
#include <conio.h>
#include <iostream.h>
#include <iomanip.h>
#include <apstring.h>
#include <apmatrix.h>
#include <fstream.h>
#include <apvector.h>
#include <graphics.h>
#include <dos.h>
#include <alloc.h>
//Struct---------------

struct fire
{ int Exist;
	int Xpos;
	int Ypos;
};

struct enemy
{
 int Exist;
 int X;
 int Y;
 int Life;
 int Hit;
 apvector <fire> Fire_E;
};

struct user
{
 int X;
 int Y;
 int Life;
 int Hit;
 int W;
};

//VARIABLES------------
int grdriver;
int grmode;
int errorcode;
int X;
int Y;
int Num;
int Delay;
int Wave;
int I;
int DelayB;
int DelayC;
int Score;


//Arrays----------------
apvector <int> StarX (40);
apvector <int>  StarY (40);
apvector <fire> Fire_U (15);
apvector <user> Ship (1);
apvector <int> Time(1);
enemy Bad [5][4];


//PROTOTYPES------------
void gr_start (int&, int&, int&);
void star ();
void init ();
void movement ();
void background();
void fire();
void fireB (int);
void wave ();
void badguy (int, int);
void weaponselect ();
void collision ();


//MAIN------------------

void main ()
{
init();


	do
		{
			star ();
			movement ();
			fireB(Delay);



			Delay++;
			DelayB++;
			DelayC++;
	 if (DelayB>300)
			DelayB=0;



	 if (DelayC==22001)
		 DelayC=0;
	 if (DelayC==22000)
			wave();


		 collision();

		 badguy(DelayB,DelayC);






		}while(Ship[0].Y>10&&Ship[0].Y<400&&Ship[0].X>10&&Ship[0].X<630);




getch();
};



//Gr Mode
void gr_start (int& grdriver, int& grmode, int& errorcode)
{	grdriver=VGA;
	grmode=VGAHI;
	initgraph(&grdriver, &grmode, "C:\\TC\\BGI");
	errorcode=graphresult();
		if (errorcode!=grOk)
			{clrscr();
			 cout<<"Error: "<<errorcode;
			 getch();
			 exit(1);
			 };

};



//Star
 void star ()
{
	if(Delay==70)
		 {
					for(Num=0;Num<40;Num++)
						{putpixel(StarX[Num],StarY[Num],0);



							if(StarY[Num]>395)
							{ StarX[Num]=random(639)+1;
								StarY[Num]=10;};

								StarY[Num]+=2;
								putpixel(StarX[Num],StarY[Num],15);
						 };
			Delay=0; };
};



//Init
	void init ()
{ int I;
	int T;
randomize();
clrscr();
Score=0;
Wave=0;
gr_start(grdriver, grmode, errorcode);
cleardevice();
Ship[0].Y=350;
Ship[0].X=400;
Delay=0;
Ship[0].W=1;
Ship[0].Life=5;
Ship[0].Hit=0;
Time[0]=random(1000)+1000;


// Star Random values
	for(Num=0;Num<40;Num++)
	 { StarX[Num]=random(639)+1;
	 StarY[Num]=random(479)+1;
	 };



	 for(Num=0;Num<15;Num++)
	{
		Fire_U[Num].Exist=0;
		Fire_U[Num].Xpos=0;
		Fire_U[Num].Ypos=0;
	};

background (); // draws the permanent background.

//Sets Enemy Data -NEW!!!!!!!
 for(I=0;I<5;I++)
	{
		for (Num=0;Num<4;Num++)
		{
				 Bad[I][Num].Exist=0;
				 Bad[I][Num].X=0;			//Set  enemy stats
				 Bad[I][Num].Y=0;
				 Bad[I][Num].Life=1;
				 Bad[I][Num].Hit=0;
				 Bad[I][Num].Fire_E.resize(5);

			for (T=0;T<5;T++)
			 {

				 Bad[I][Num].Fire_E[T].Exist=0;
				 Bad[I][Num].Fire_E[T].Xpos=0;
				 Bad[I][Num].Fire_E[T].Ypos=0;
			 }
	 }
	}

};


// Movement
void movement ()

{
if(kbhit())

			{ setfillstyle(0,0);
				bar(Ship[0].X,Ship[0].Y,Ship[0].X+10,Ship[0].Y+10);
				switch (getch())
					{case 72:Ship[0].Y=Ship[0].Y-5;
								break;
					 case 77:Ship[0].X+=5;
								break;
					 case 75:Ship[0].X=Ship[0].X-5;
								break;
					 case 80:Ship[0].Y+=5;
								break;
					 case 32:fire();
								break;
					 case 9:weaponselect();
								 break;
					 case 27: wave();
								 break;
					};
				 setfillstyle(1,1);
				 bar(Ship[0].X,Ship[0].Y,Ship[0].X+10,Ship[0].Y+10);

			};


};


//Background
void background ()
{
 setfillstyle(1,4);
 bar(0, 400, 639, 479);
 bar(0, 0,  3, 400);
 bar(0, 0, 640, 3);
 bar(637, 0, 640, 400);
 setcolor(0);
 circle(45, 440, 38);
 circle(595, 440, 38);
 moveto(16, 435);
 settextstyle(0, 0, 2);
 outtext("Fuel");
 moveto(565, 435);
 settextstyle(0,0,1);
 outtext("Velocity");
 moveto(420, 410);
 outtext("Lazer Cannons ");
 moveto(420, 430);
 outtext("Anti-matter beam ");
 moveto(420, 450);
 outtext("EM Missles ");
 moveto(1,1);
 setcolor(8);
 outtext("Score");

 moveto(225,402);
 setcolor(14);
 outtext("Damage");
 moveto(100,402);
 outtext("0%");
 moveto(370,402);
 outtext("100%");

 setfillstyle(1,12);
 bar(100,420, 400,440);
 //setfillstyle(1,14);
 //bar(105,425, 395,435);
};

//Fire
void fire ()
{
int I;

for(I=0;I<15;I++)
	if (Fire_U[I].Exist==0)
		{
		 Fire_U[I].Exist=1;
		 Fire_U[I].Xpos=Ship[0].X;
		 Fire_U[I].Ypos=Ship[0].Y;
		 I=14;
		};

};


//Fire B
 void fireB (int Delay)
{
 int I;
 int T;
 int Num;



if (Delay==80||Delay==40||Delay==20||Delay==30||Delay==10)
	for (I=0;I<5;I++)
		for (Num=0;Num<4;Num++)
			for(T=0;T<5;T++)
				if (Bad[I][Num].Fire_E[T].Exist==1)
							{setfillstyle(0,0);


								bar(Bad[I][Num].Fire_E[T].Xpos+4,Bad[I][Num].Fire_E[T].Ypos+4,Bad[I][Num].Fire_E[T].Xpos,Bad[I][Num].Fire_E[T].Ypos);

								Bad[I][Num].Fire_E[T].Ypos-=1;


								Bad[I][Num].Fire_E[T].Ypos=Bad[I][Num].Y+4;

							 }



 if (Delay==20||Delay==40||Delay==60||Delay==80)
	 {
			for(I=0;I<15;I++)
			 { if(Fire_U[I].Exist==1)
						{  setfillstyle(0,0);
							 bar(Fire_U[I].Xpos,Fire_U[I].Ypos-3,Fire_U[I].Xpos+4,Fire_U[I].Ypos);

							 Fire_U[I].Ypos-=1;

										switch (Ship[0].W)
							 {case 1: setfillstyle (1,4);
												break;
								case 2: setfillstyle (1,5);
												break;
								case 3: setfillstyle (1,15);
												break;

								}

							 bar(Fire_U[I].Xpos,Fire_U[I].Ypos-3,Fire_U[I].Xpos+4,Fire_U[I].Ypos);

							if(Fire_U[I].Ypos<10)
								{	Fire_U[I].Exist=0;
									setfillstyle(0,70);
									bar(Fire_U[I].Xpos-2,Fire_U[I].Ypos-3,Fire_U[I].Xpos+2,Fire_U[I].Ypos);

									Fire_U[I].Xpos=0;
									Fire_U[I].Ypos=0;
									Fire_U[I].Exist=0;
								};

							};

					};
	 };






};



void  wave ()
{ int Formation;
	int Type;
	int I;
	int N;
	int Form;




Type=Wave;
Form=random(3);
		switch (Form)
			{ case 0:  for (N=0;N<4;N++)
									{  Bad[Type][N].Exist=1;
										 Bad[Type][N].Life=0;
										 badguy(DelayB,DelayC);

										 Bad[Type][N].Life=1;
										 Bad[Type][N].X=((N+1)*120); //placing enemies horizontally
										 Bad[Type][N].Y=13;

									};

									break;


				case 1:  for (N=0;N<4;N++)
									{  Bad[Type][N].Exist=1;
										 Bad[Type][N].Life=1;
										 badguy(DelayB,DelayC);
										 Bad[Type][N].Life=1;

										 Bad[Type][N].X=random(600)+20; //placing horizontally
										 Bad[Type][N].Y=0-(N*10);

									};
									break;


				case 2: 	for (N=0;N<4;N++)
									{  Bad[Type][N].Exist=1;
										 Bad[Type][N].Life=1;
										 badguy(DelayB,DelayC);
										 Bad[Type][N].Life=1;

										 Bad[Type][N].X=random(620)+10;; //placing horizontally
										 Bad[Type][N].Y=13;


									};

									break;

				};
Wave++;

if(Wave==4)
 Wave=1;


};




void badguy (int Delay,int DelayC)
{
int T;
int I;
int Num;

if (DelayC==Time[0])
	for (I=0;I<5;I++)
		for (Num=0;Num<4;Num++)
			 for(T=0;T<5;T++)
				 if (Bad[I][Num].Fire_E[T].Exist==0)
					 Bad[I][Num].Fire_E[T].Exist=1;


if(Delay==20||Delay==40||Delay==60)
	for (I=0;I<5;I++)
		for (Num=0;Num<4;Num++)
		 if (Bad[I][Num].Exist==1)
				{setfillstyle(1,0);
					if(Bad[I][Num].Y>10)
						bar(Bad[I][Num].X, Bad[I][Num].Y, Bad[I][Num].X+10, Bad[I][Num].Y-2);

					Bad[I][Num].Y+=1;

					setfillstyle(1,I+1);

					if(Bad[I][Num].Y>10)
							bar(Bad[I][Num].X, Bad[I][Num].Y,  Bad[I][Num].X+10,   Bad[I][Num].Y-2);

					if (Bad[I][Num].Life==0)
							 {
								setfillstyle(1,0);
								bar(Bad[I][Num].X, Bad[I][Num].Y, Bad[I][Num].X+10, Bad[I][Num].Y-2);
								Bad[I][Num].Exist=0;
								Bad[I][Num].Life=0;
								Bad[I][Num].Hit=0;
								Bad[I][Num].X=0;			//Set  enemy stats
								Bad[I][Num].Y=0;
								}


						 if (Bad[I][Num].Y>=390)
							{ Bad[I][Num].Exist=0;
								Bad[I][Num].Life=0;
								Bad[I][Num].Hit=0;
								setfillstyle(1,0);
								bar(Bad[I][Num].X, Bad[I][Num].Y, Bad[I][Num].X+10, Bad[I][Num].Y-2);
								Bad[I][Num].X=0;			//Set  enemy stats
								Bad[I][Num].Y=0;
							}
				}






			if (Delay==10||Delay==50||Delay==100||Delay==1500||Delay==200||Delay==250)
			 for (I=0;I<5;I++)
				for (Num=0;Num<4;Num++)



				 for(T=0;T<5;T++)
					if (Bad[I][Num].Fire_E[T].Exist==1)
							{setfillstyle(0,0);


								bar(Bad[I][Num].Fire_E[T].Xpos+4,Bad[I][Num].Fire_E[T].Ypos+4,Bad[I][Num].Fire_E[T].Xpos,Bad[I][Num].Fire_E[T].Ypos);

								Bad[I][Num].Fire_E[T].Ypos-=1;


								Bad[I][Num].Fire_E[T].Ypos=Bad[I][Num].Y+4;

								setfillstyle(1,6);
								bar(Bad[I][Num].Fire_E[T].Xpos+4,Bad[I][Num].Fire_E[T].Ypos+4,Bad[I][Num].Fire_E[T].Xpos,Bad[I][Num].Fire_E[T].Ypos);

								 if (Bad[I][Num].Fire_E[T].Ypos>=390)
									{ setfillstyle(0,0);
										bar(Bad[I][Num].Fire_E[T].Xpos+4,Bad[I][Num].Fire_E[T].Ypos+4,Bad[I][Num].Fire_E[T].Xpos,Bad[I][Num].Fire_E[T].Ypos);

										Bad[I][Num].Fire_E[T].Exist=0;
										Bad[I][Num].Fire_E[T].Xpos=0;
										Bad[I][Num].Fire_E[T].Ypos=0;

									};


								};












};

void weaponselect()
{switch (Ship[0].W)
	 {case 1: moveto(420, 450);
						setcolor(4);
						outtext("<EM Missiles>");
						moveto(420, 450);
						setcolor(0);
						outtext("EM Missiles");
						moveto(420, 410);
						setcolor(4);
						outtext("Lazer Canons");
						moveto(420, 410);
						setcolor(0);
						outtext("<Lazer Canons>");
						Ship[0].W++;
						break;
		case 2: moveto(420, 410);
						setcolor(4);
						outtext("<Lazer Canons>");
						moveto(420, 410);
						setcolor(0);
						outtext("Lazer Canons");
						moveto(420, 430);
						setcolor(4);
						outtext("Anti-matter beam");
						moveto(420, 430);
						setcolor(0);
						outtext("<Anti-matter beam>");
						Ship[0].W++;
						break;
		case 3: moveto(420, 430);
						setcolor(4);
						outtext("<Anti-matter beam>");
						moveto(420, 430);
						setcolor(0);
						outtext("Anti-matter beam");
						moveto(420, 450);
						setcolor(4);
						outtext("EM Missiles");
						setcolor(0);
						moveto(420, 450);
						outtext("<EM Missiles>");
						Ship[0].W=1;
						break;

	}
};


void collision ()
{
int I;
int Num;
int J;


					 for (J=0;J<15;J++)
						 if(Fire_U[J].Exist==1)
							 for (I=0;I<5;I++)
									for (Num=0;Num<4;Num++)
										if (Bad[I][Num].Exist==1)
														if(Fire_U[J].Ypos==Bad[I][Num].Y+2)
															if(Fire_U[J].Xpos>=Bad[I][Num].X-3&&Fire_U[J].Xpos<=Bad[I][Num].X+9)
															 { setfillstyle(1,0);
																 bar(Bad[I][Num].X, Bad[I][Num].Y, Bad[I][Num].X+10, Bad[I][Num].Y-2);
																 bar(Fire_U[J].Xpos,Fire_U[J].Ypos-3,Fire_U[J].Xpos+4,Fire_U[J].Ypos);
																 Bad[I][Num].Life-=1;
																 Fire_U[J].Ypos=0;
																 Fire_U[J].Xpos=0;
																 Fire_U[J].Exist=0;



															 };




	if(Ship[0].Hit==5)
	 {setfillstyle(1,7);
		bar(150,200,390,300);
		moveto(200,200);
		setcolor(12);
		settextstyle(0, 0, 2);

		outtext("Game Over");
		Ship[0].Y=9000;

	 };


for (I=0;I<5;I++)
	for (Num=0;Num<4;Num++)
	 if (Bad[I][Num].Exist==1)
		{
		 if(Ship[0].Y==Bad[I][Num].Y+2)
			if(Ship[0].X>=Bad[I][Num].X-9 && Ship[0].X<=Bad[I][Num].X+9)
			 {
				 setfillstyle(1,12);
				 bar(100,420, 400,440);
				 setfillstyle(1,14);
				 Ship[0].Hit++;
				 bar(105,425,105+58*(Ship[0].Hit)   ,435);
				 setfillstyle(1,0);
				 bar(Bad[I][Num].X, Bad[I][Num].Y, Bad[I][Num].X+10, Bad[I][Num].Y-2);
				 Bad[I][Num].Exist=0;
				 Bad[I][Num].Life=0;
				 Bad[I][Num].Hit=0;
				 Bad[I][Num].X=0;			//Set  enemy stats
				 Bad[I][Num].Y=0;
				 cout<<Ship[0].Hit;
			 };


			};
	};



